name: CI
on:
  push:
    branches: [ main ]

jobs:
  CIJOB:
    runs-on: AWS-EC2-smartcmp
    env:
      REGION: "ap-northeast-1"
      EKSCLUSTER: "test-eks"
      ECR: "555411786219.dkr.ecr.ap-northeast-1.amazonaws.com"
      DOCKERIMAGE: "rexzhengflask"
      K8SYAML: "UnderArmourtest.yaml"
      SHFILE: "apply.sh"
      COOKIESFILE: "getcookies"
      CMPLOGINURL: "https://cmp.smartcmp.online:6443/platform-api/login?username=feiluo_user&password=d41e98d1eafa6d6011d3a70f1a5b92f0&loginType=Normal&encrypted=true"
      CMPTRIGGERURL: "https://cmp.smartcmp.online:6443/platform-api/pipeline-configs/3d84f7a3-72f0-46d8-8bcb-e3f51117e4ed/executions?triggerType=manual
      CMPTRIGGERURLP1: "-d"
      CMPTRIGGERURLP2: "\{\"globalParams\"\:\{\"globalParameters\"\:\{\}\},\"taskParams\"\:\{\"stage_1_1_f5ca9f9151a447a58fd4815cc42699aa\"\:\{\"resourceIds\"\:\"8edf7b7e-0107-461a-a43b-8e3dae176e66\"\}\}\}"
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    # Triggering SonarQube analysis as results of it are required by Quality Gate check.
   # - name: SonarQube Scan
   #  uses: sonarsource/sonarqube-scan-action@master
    #  env:
   #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # Check the Quality Gate status.
    #- name: SonarQube Quality Gate check
    #  id: sonarqube-quality-gate-check
    #  uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
    #  timeout-minutes: 5
    #  env:
    #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    #- name: "Example show SonarQube Quality Gate Status value"
    #  run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
    - name: CheckinSonarQube
      run: |
        sonar-scanner -Dsonar.projectKey=testforunderarmourkey -Dsonar.sources=. -Dsonar.host.url=http://172.31.41.240:9000 -Dsonar.login=7bf27527d808361c0d838d3d6a3c6668a8a4038d
    - name: build
      run: |
        docker build -t $ECR/$DOCKERIMAGE:$GITHUB_RUN_ID .
        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR
        docker push $ECR/$DOCKERIMAGE:$GITHUB_RUN_ID
        docker image ls | grep $ECR/$DOCKERIMAGE
        docker rmi $ECR/$DOCKERIMAGE:$GITHUB_RUN_ID
    - name: deploy-1
      run: |
        aws eks --region $REGION update-kubeconfig --name $EKSCLUSTER
        eval sed -i 's!REPOSITORY!$ECR!g' $K8SYAML
        eval sed -i 's!IMAGE!$DOCKERIMAGE!g' $K8SYAML
        eval sed -i 's!ID!$GITHUB_RUN_ID!g' $K8SYAML
    - name: deploy-CMP
      run: |
        curl -k -X POST -c $COOKIESFILE $CMPLOGINURL
        curl -k -X POST -H "Content-Type: application/json" -b $COOKIESFILE $CMPTRIGGERURL $CMPTRIGGERURLP1 $CMPTRIGGERURLP2

